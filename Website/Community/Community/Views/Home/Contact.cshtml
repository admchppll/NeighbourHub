@model Community.Models.ContactModel
@using reCAPTCHA.MVC;
@{
    ViewBag.Title = "Contact";
}
<script src='https://www.google.com/recaptcha/api.js'></script>
<div class="col-xs-12">
    <div class="col-xs-12">
        <h2>Contact Us</h2>
        <div class="col-xs-12 col-sm-6 col-sm-offset-3 text-center">
            <address>
                <i class="fa fa-address-book" aria-hidden="true"></i>
                <strong>Address</strong><br />
                NeighbourHub<br />
                Loughborough University<br />
                Epinal Way<br />
                Loughborough<br />
                LE11 3TU
            </address>

            <address>
                <i class="fa fa-envelope" aria-hidden="true"></i>
                <strong>Email</strong><br />   <a href="mailto:info@theneighbourhub.online">info@theneighbourhub.online</a>
            </address>
        </div>
    </div>
</div>
@if (ViewBag.Success == true)
{
    <div class="col-xs-12 alert alert-success">
        <strong>Success!</strong> Your message has been received, you should also receive an email confirmation to the email address provided.
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="col-xs-12">
        <div class="form-group vertical-padding">
            @Html.LabelFor(m => m.Name, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-xs-12">
                @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

        <div class="col-xs-12 col-md-6">
            <div class="form-group vertical-padding">
                @Html.LabelFor(m => m.Email, new { @class = "col-md-4 control-label" })
                <div class="col-xs-12">
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email" })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-xs-12 col-md-6">
            <div class="form-group vertical-padding">
                @Html.LabelFor(m => m.ConfirmEmail, new { @class = "col-md-4 control-label" })
                <div class="col-xs-12">
                    @Html.TextBoxFor(m => m.ConfirmEmail, new { @class = "form-control", type = "email" })
                    @Html.ValidationMessageFor(m => m.ConfirmEmail, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-xs-12">
            <div class="form-group vertical-padding">
                @Html.LabelFor(m => m.Message, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-xs-12">
                    @Html.TextAreaFor(m => m.Message, new { htmlAttributes = new { @class = "form-control", rows = 15 } })
                    @Html.ValidationMessageFor(m => m.Message, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-xs-12">
            <div class="col-xs-12 vertical-padding">
                @Html.Recaptcha()
                @Html.ValidationMessage("ReCaptcha")
            </div>
        </div>

        <div class="col-xs-12">
                <div class="form-group">
                    <div class="col-md-10 vertical-padding">
                        <input type="submit" value="Send" class="btn btn-primary" />
                    </div>
                </div>
        </div>

}
<script>
    CKEDITOR.replaceAll();
</script>
